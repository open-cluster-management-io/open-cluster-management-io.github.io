<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cluster Inventory on Open Cluster Management</title><link>https://open-cluster-management.io/docs/concepts/cluster-inventory/</link><description>Recent content in Cluster Inventory on Open Cluster Management</description><generator>Hugo</generator><language>en</language><atom:link href="https://open-cluster-management.io/docs/concepts/cluster-inventory/index.xml" rel="self" type="application/rss+xml"/><item><title>ClusterClaim</title><link>https://open-cluster-management.io/docs/concepts/cluster-inventory/clusterclaim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://open-cluster-management.io/docs/concepts/cluster-inventory/clusterclaim/</guid><description>&lt;h2 id="what-is-clusterclaim"&gt;What is ClusterClaim?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ClusterClaim&lt;/code&gt; is a cluster-scoped API available to users on a managed cluster.
The &lt;code&gt;ClusterClaim&lt;/code&gt; objects are collected from the managed cluster and saved into
the status of the corresponding &lt;code&gt;ManagedCluster&lt;/code&gt; object on the hub.&lt;/p&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ClusterClaim&lt;/code&gt; is used to specify additional properties of the managed cluster like
the clusterID, version, vendor and cloud provider. We defined some reserved &lt;code&gt;ClusterClaims&lt;/code&gt;
like &lt;code&gt;id.k8s.io&lt;/code&gt; which is a unique identifier for the managed cluster.&lt;/p&gt;</description></item><item><title>ManagedCluster</title><link>https://open-cluster-management.io/docs/concepts/cluster-inventory/managedcluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://open-cluster-management.io/docs/concepts/cluster-inventory/managedcluster/</guid><description>&lt;h2 id="what-is-managedcluster"&gt;What is ManagedCluster?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ManagedCluster&lt;/code&gt; is a cluster scoped API in the hub cluster representing the
registered or pending-for-acceptance Kubernetes clusters in OCM. The
&lt;a href="https://open-cluster-management.io/docs/getting-started/installation/register-a-cluster/"&gt;klusterlet agent&lt;/a&gt;
working in the managed cluster is expected to actively maintain/refresh the
status of the corresponding &lt;code&gt;ManagedCluster&lt;/code&gt; resource on the hub cluster.
On the other hand, removing the &lt;code&gt;ManagedCluster&lt;/code&gt; from the hub cluster indicates
the cluster is denied/exiled from the hub cluster. The following is the
introduction of how the cluster registration lifecycle works under the hood:&lt;/p&gt;</description></item><item><title>ManagedClusterSet</title><link>https://open-cluster-management.io/docs/concepts/cluster-inventory/managedclusterset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://open-cluster-management.io/docs/concepts/cluster-inventory/managedclusterset/</guid><description>&lt;p&gt;&lt;strong&gt;API-CHANGE NOTE&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ManagedClusterSet&lt;/code&gt; and &lt;code&gt;ManagedClusterSetBinding&lt;/code&gt; API v1beta1 version will no longer be served in OCM v0.12.0.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Migrate manifests and API clients to use the &lt;code&gt;ManagedClusterSet&lt;/code&gt; and &lt;code&gt;ManagedClusterSetBinding&lt;/code&gt; API v1beta2 version, available since OCM v0.9.0.&lt;/li&gt;
&lt;li&gt;All existing persisted objects are accessible via the new API.&lt;/li&gt;
&lt;li&gt;Notable changes:
&lt;ul&gt;
&lt;li&gt;The default cluster selector type will be &lt;code&gt;ExclusiveClusterSetLabel&lt;/code&gt; in v1beta2, and type &lt;code&gt;LegacyClusterSetLabel&lt;/code&gt; in v1beta1 is removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-managedclusterset"&gt;What is ManagedClusterSet?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ManagedClusterSet&lt;/code&gt; is a cluster-scoped API in the hub cluster for grouping a
few managed clusters into a &amp;ldquo;set&amp;rdquo; so that hub admin can operate these clusters
altogether in a higher level. The concept is inspired by the &lt;a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-multicluster/1645-multi-cluster-services-api#terminology"&gt;enhancement&lt;/a&gt;
from the Kubernetes SIG-Multicluster. Member clusters in the set are supposed
to have common/similar attributes e.g. purpose of use, deployed regions, etc.&lt;/p&gt;</description></item></channel></rss>